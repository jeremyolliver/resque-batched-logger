Resque Batched Logger
=====================

ResqueBatchedLogger is an extension to the fantastic background work gem 'resque'. This extension is intended for when you have large volumes of work you process in logical groups, or batches, and want timing, and logging information on the group as a whole. For example we have a daily import process which spawns a large amount of several types of jobs, running a couple of hours. This grouped logging lets us track when those jobs finish, and how long each took (by type)

Installation:
=============

  gem install resque-batched-logger

Usage:
======

  # include the module in your job classes
  class MyJob
    include Resque::Plugins::BatchedLogging
    def self.perform(*args)
      # your job implementation
    end
  end

  # enqueue your jobs by calling #enqueue from within a batched block on your job classes
  # This will call any custom #self.enqueue or #self.create methods defined on your job class, defaulting to the standard Resque.enqueue after wrapping your job in it's logging code
  # batch names are unique, so only one batch with a given name can exist at once 
  MyJob.batched(:batch_name => "Daily MyJob run") do
    enqueue(1,2,3,{:my => :options})
  end

You'll need to run at least one resque-worker on the queue named 'batched_logger', (recommended only one for consistency of log ordering) this worker can be reasonably low priority, depending on how quickly you need output to the logfile.

The logging of each batch of jobs will be written to a log file at `log/batched_jobs.log` by the BatchedLogger resque job.

Sample Output:
==============

  ==== Batched jobs 'Daily MyJob run' : logged at Mon Mar 28 16:25:04 +1300 2011 ====
    batch started processing at: Mon Mar 28 16:23:00 +1300 2011
    batch finished processing at: Mon Mar 28 16:25:02 +1300 2011
    Total run time for batch: 122 seconds
    Jobs Completed: 220
    Average time per job: 0.527 seconds
    Total time spent processing jobs: 116 seconds
  ==== Batched jobs 'Daily MyJob run' completed in 122 seconds ====

How it works:
=============

Enqueueing jobs with `MyJob.batched` syntax behind the scenes will create your jobs with an extra options hash containing the batched options (`MyJob.enqueue(1,2,3,{:my => :options}, {:batched => true})`), and store some tracking information in redis
the Resque::Job#perform method has been wrapped in benchmarking code that is only run when the :batched option is set on jobs. This logging information is stored in redis, and once all the jobs present in the batch have been performed, the BatchedJobsLogger pulls this information out of redis again and processes it.
