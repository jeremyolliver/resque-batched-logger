Resque Batched Logger
=====================

Installation:
=============

  gem install resque-batched-logger

Usage:
======

  class MyJob
    extend Resque::Plugins::BatchedLogging
    def self.perform(*args)
      # your job implementation
    end
  end

  MyJob.in_batches(:batch_name => "Daily MyJob run") do
    enqueue(1,2,3,{:my => :options})
  end

run at least one resque-worker on the queue named 'batched_logger', it's recommended that you only need one worker processing on this queue, and reasonably low priority, depending on how quickly you need outout.
This won't be an issue if you already run your workers with QUEUE=*

The logging of each batch of jobs will be written to a log file at `log/batched_jobs.log` by the BatchedLogger resque job.

Sample Output:
==============

  ==== Batched jobs 'Daily MyJob run' : logged at Mon Mar 28 16:25:04 +1300 2011 ====
    batch started processing at: Mon Mar 28 16:23:00 +1300 2011
    batch finished processing at: Mon Mar 28 16:25:02 +1300 2011
    Total run time for batch: 122 seconds
    Jobs Completed: 220
    Average time per job: 0.527 seconds
    Total time spent processing jobs: 116 seconds
  ==== Batched jobs 'Daily MyJob run' completed in 122 seconds ====

How it works:
=============

Enqueueing jobs with `MyJob.in_batches` syntax behind the scenes will create your jobs with an extra options hash containing the batched options (`MyJob.enqueue(1,2,3,{:my => :options}, {:batched => true})`)
the Resque::Job#perform method has been wrapped in benchmarking code that is only run when the :batched option is set on jobs. This logging information is stored in redis, and once all the jobs present in the batch have been performed, the BatchedJobsLogger pulls this information out of redis again and processes it.
